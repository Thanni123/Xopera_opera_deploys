---
- hosts: localhost
  vars:
    - current_directory: "{{ lookup('env', 'PWD') }}"
  tasks:
    - name: Find .zip file by name
      find:
        paths: "{{ current_directory }}"
        patterns: "{{ zip_file }}"
        recurse: yes
      register: zip_file_matched_subdirectory

    - name: Matched zip file
      debug:
        msg: "Matched zip file: {{ zip_file_matched_subdirectory.files[0].path }}"

    - name: Lambda "{{ function_name }}" deploy
      lambda:
        name: "{{ function_name }}"
        zip_file: "{{ lookup('fileglob', zip_file_matched_subdirectory.files[0].path) }}"
        runtime: "{{ lambda_runtime }}"
        region: "{{ aws_region }}"
        role: "{{ role_arn }}"
        handler: "{{ lambda_handler }}"
        timeout: "{{ lambda_timeout }}"
        memory_size: "{{ lambda_memory }}"
        environment_variables: "{{ env_vars }}"
      register: lambda_info

    - name: "Put concurrency of Lambda function on AWS : {{ function_name }}"
      command: >-
        aws lambda put-function-concurrency
          --function-name {{ function_name }}
          --reserved-concurrent-executions {{ lambda_concurrency }}
          --region {{ aws_region }}
      when: lambda_concurrency | d(False)

    - name: Create function alias name
      lambda_alias:
        function_name: "{{ function_name }}"
        name: "{{ func_alias }}"
        region: "{{ aws_region }}"
        state: present
      register: alias_info

    - name: "Add invocation permission of Lambda function on AWS"
      lambda_policy:
        function_name: "{{ function_name }}"
        statement_id: "{{ permission_id }}"
        action: lambda:InvokeFunction
        region: "{{ aws_region }}"
        alias: "{{ func_alias }}"
        principal: "s3.amazonaws.com"

    - name: Set attributes
      set_stats:
        data:
          arn: "{{alias_info.alias_arn}}"
          region: "{{ aws_region }}"
