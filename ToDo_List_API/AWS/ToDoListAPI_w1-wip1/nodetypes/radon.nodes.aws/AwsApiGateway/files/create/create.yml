---
- hosts: all
  vars:
#    - spec_path: "/tmp/swagger.json"
    - current_directory: "{{ lookup('env','PWD') }}"
  tasks:
#NOTE: check for existing swagger spec in whole project folder
    - name: Find swagger file by name
      find:
        paths: "{{ current_directory }}"
        patterns: "{{ swagger_file }}"
        recurse: yes
      register: matched_swagger_file

    - name: Matched zip file
      debug:
        msg: "Matched swagger file: {{ matched_swagger_file.files[0].path }}"

#    - name: Check that the swagger file exists
#      stat:
#        path: "{{ matched_swagger_file.files[0].path }}"
#      register: swagger_spec
#
#    - name: Remove the old swagger specification
#      file:
#        path: "{{ matched_swagger_file.files[0].path }}"
#        state: absent
#      when: swagger_spec.stat.exists

#NOTE: additional check for existing swagger spec for given path
#    - name: Check that the swagger.json exists
#      stat:
#        path: "{{ spec_path }}"
#      register: swagger_spec
#
#    - name: remove the old swagger specification
#      file:
#        path: "{{ spec_path }}"
#        state: absent
#      when: swagger_spec.stat.exists
#
#    - name: Initialize empty swagger.json if it does not exist
#      file:
#        path: "{{ spec_path }}"
#        state: touch
#
#    - name: Set the basis for API
#      copy:
#        content: '{ "swagger": "2.0", "info": {"title": "{{ api_title }}", "description": "{{ api_description }}", "version": "{{ api_version }}" }, "paths": {}}'
#        dest: "{{ spec_path }}"

    - name: Deploy API gateway
      aws_api_gateway:
        state: present
        swagger_file: "{{ lookup('fileglob', matched_swagger_file.files[0].path) }}"
        stage: production
        region: "{{ aws_region }}"

#NOTE: custom python script for generation swagger spec based on generated swagger base before
#    - name: Run swagger_gen.py script for adding methods to swagger file
#      script: swagger_gen.py {{ iam_role_response.arn }} {{ create_post_method }} {{ uriPost }} {{ create_put_method }} {{ uriPut }} {{ create_delete_method }} {{ uriDelete }} {{ create_get_method }} {{ uriGet }}
#      args:
#        executable: python3

#    - name: Setup AWS API Gateway setup on AWS and deploy API definition
#      aws_api_gateway:
#        state: present
#        swagger_file: "{{ current_directory }}/swagger.json"
#        stage: production
#        region: "{{ region }}"
