# Note: Service Template for deploying ToDo List API Gateway Application
- hosts: localhost
  vars:
    - current_directory: "{{ lookup('env','PWD') }}"
    - region: eu-central-1
    - function_name1: list
    - zip_file1: list.zip
  tasks:
    # Note: Setup & configuration of AWS Plattform
    - name: Install python module boto
      pip:
        name: boto
        state: latest

    - name: Install python module boto3
      pip:
        name: boto3
        state: latest

    - name: Install python module botocore
      pip:
        name: botocore
        state: latest

    - name: Install python module awscli
      pip:
        name: awscli
        state: latest

    - name: Create a role with description and tags
      iam_role:
        name: mynewrole
        state: present
        assume_role_policy_document: "{{ lookup('file','policy.json') }}"
        managed_policy:
          -  arn:aws:iam::aws:policy/AWSLambdaFullAccess
          -  arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      register: iam_role_response

    # Note: Setup & configuration of first AWS Lambda function
    - name: Find "{{ zip_file1 }}"
      find:
        paths: "{{ current_directory }}"
        patterns: "{{ zip_file1 }}"
        recurse: yes
      register: matched_zip_file

    - name: Create AWS Lambda function - "{{ function_name1 }}"
      lambda:
        name: "{{ function_name1 }}"
        zip_file: "{{ lookup('fileglob', matched_zip_file.files[0].path) }}"
        runtime: 'nodejs12.x'
        region: "{{ region }}"
        role: "{{ iam_role_response.arn }}"
        handler: 'index.handler'
        timeout: 3
        memory_size: 512
        environment_variables: null
      register: lambda_info1

    - name: Create function alias name - "{{ function_name1 }}"
      lambda_alias:
        function_name: "{{ function_name1 }}"
        name: "{{ function_name1 }}-v0_1"
        region: "{{ region }}"
        state: present
      register: alias_info1

    - name: Add invocation permission of Lambda function on AWS - "{{ function_name1 }}"
      lambda_policy:
        function_name: "{{ function_name1 }}"
        statement_id: "lambda-myFunction-{{ function_name1 }}"
        action: lambda:InvokeFunction
        region: "{{ region }}"
        alias: "{{ function_name1 }}-v0_1"
        principal: "s3.amazonaws.com"
