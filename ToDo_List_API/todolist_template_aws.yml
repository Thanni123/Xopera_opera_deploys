# Note: Service Template for deploying ToDo List API Gateway Application
- hosts: localhost
  vars:
    - current_directory: "{{ lookup('env','PWD') }}"
    - region: eu-central-1
    - function_name1: list
    - function_name2: get
    - function_name3: create
    - function_name4: update
    - function_name5: delete
    - zip_file1: list.zip
    - zip_file2: get.zip
    - zip_file3: create.zip
    - zip_file4: update.zip
    - zip_file5: delete.zip
    - api_title: ToDo_List_API
    - api_description: API description for ToDo List API Application
    - api_version: "{{ lookup('pipe','date') }}"
    - create_post_method: False
    - uriPost: arn:aws:apigateway:{{ region }}:lambda:path/2015-03-31/functions/{{ alias_info1.alias_arn }}
    - create_put_method: False
    - uriPut: arn:aws:apigateway:{{ region }}:lambda:path/2015-03-31/functions/{{ alias_info2.alias_arn }}
    - create_delete_method: False
    - uriDelete: arn:aws:apigateway:{{ region }}:lambda:path/2015-03-31/functions/{{ alias_info3.alias_arn }}
    - create_get_method: True
    - uriGet: arn:aws:apigateway:{{ region }}:lambda:path/2015-03-31/functions/{{ alias_info4.alias_arn }}
  tasks:
    # Note: Setup & configuration of AWS Plattform
    - name: Install python module boto
      pip:
        name: boto
        state: latest

    - name: Install python module boto3
      pip:
        name: boto3
        state: latest

    - name: Install python module botocore
      pip:
        name: botocore
        state: latest

    - name: Install python module awscli
      pip:
        name: awscli
        state: latest

    - name: Create a role with description and tags
      iam_role:
        name: mynewrole
        state: present
        assume_role_policy_document: "{{ lookup('file','policy.json') }}"
        managed_policy:
          -  arn:aws:iam::aws:policy/AWSLambdaFullAccess
          -  arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      register: iam_role_response

    # Note: Setup & configuration of first AWS Lambda function
    - name: Find "{{ zip_file1 }}"
      find:
        paths: "{{ current_directory }}"
        patterns: "{{ zip_file1 }}"
        recurse: yes
      register: matched_zip_file1

    - name: Create AWS Lambda function - "{{ function_name1 }}"
      lambda:
        name: "{{ function_name1 }}"
        zip_file: "{{ lookup('fileglob', matched_zip_file1.files[0].path) }}"
        runtime: 'nodejs12.x'
        region: "{{ region }}"
        role: "{{ iam_role_response.arn }}"
        handler: 'index.handler'
        timeout: 3
        memory_size: 512
        environment_variables: null
      register: lambda_info1

    - name: Create function alias name - "{{ function_name1 }}"
      lambda_alias:
        function_name: "{{ function_name1 }}"
        name: "{{ function_name1 }}-v0_1"
        region: "{{ region }}"
        state: present
      register: alias_info1

    - name: Add invocation permission of Lambda function on AWS - "{{ function_name1 }}"
      lambda_policy:
        function_name: "{{ function_name1 }}"
        statement_id: "lambda-myFunction-{{ function_name1 }}"
        action: lambda:InvokeFunction
        region: "{{ region }}"
        alias: "{{ function_name1 }}-v0_1"
        principal: "s3.amazonaws.com"

    # Note: Setup & configuration of second AWS Lambda function
    - name: Find "{{ zip_file2 }}"
      find:
        paths: "{{ current_directory }}"
        patterns: "{{ zip_file2 }}"
        recurse: yes
      register: matched_zip_file2

    - name: Create AWS Lambda function - "{{ function_name2 }}"
      lambda:
        name: "{{ function_name2 }}"
        zip_file: "{{ lookup('fileglob', matched_zip_file2.files[0].path) }}"
        runtime: 'nodejs12.x'
        region: "{{ region }}"
        role: "{{ iam_role_response.arn }}"
        handler: 'index.handler'
        timeout: 3
        memory_size: 512
        environment_variables: null
      register: lambda_info2

    - name: Create function alias name - "{{ function_name2 }}"
      lambda_alias:
        function_name: "{{ function_name2 }}"
        name: "{{ function_name2 }}-v0_1"
        region: "{{ region }}"
        state: present
      register: alias_info2

    - name: Add invocation permission of Lambda function on AWS - "{{ function_name2 }}"
      lambda_policy:
        function_name: "{{ function_name2 }}"
        statement_id: "lambda-myFunction-{{ function_name2 }}"
        action: lambda:InvokeFunction
        region: "{{ region }}"
        alias: "{{ function_name2 }}-v0_1"
        principal: "s3.amazonaws.com"

    # Note: Setup & configuration of third AWS Lambda function
    - name: Find "{{ zip_file3 }}"
      find:
        paths: "{{ current_directory }}"
        patterns: "{{ zip_file3 }}"
        recurse: yes
      register: matched_zip_file3

    - name: Create AWS Lambda function - "{{ function_name3 }}"
      lambda:
        name: "{{ function_name3 }}"
        zip_file: "{{ lookup('fileglob', matched_zip_file3.files[0].path) }}"
        runtime: 'nodejs12.x'
        region: "{{ region }}"
        role: "{{ iam_role_response.arn }}"
        handler: 'index.handler'
        timeout: 3
        memory_size: 512
        environment_variables: null
      register: lambda_info3

    - name: Create function alias name - "{{ function_name3 }}"
      lambda_alias:
        function_name: "{{ function_name3 }}"
        name: "{{ function_name3 }}-v0_1"
        region: "{{ region }}"
        state: present
      register: alias_info3

    - name: Add invocation permission of Lambda function on AWS - "{{ function_name3 }}"
      lambda_policy:
        function_name: "{{ function_name3 }}"
        statement_id: "lambda-myFunction-{{ function_name3 }}"
        action: lambda:InvokeFunction
        region: "{{ region }}"
        alias: "{{ function_name3 }}-v0_1"
        principal: "s3.amazonaws.com"

    # Note: Setup & configuration of fourth AWS Lambda function
    - name: Find "{{ zip_file4 }}"
      find:
        paths: "{{ current_directory }}"
        patterns: "{{ zip_file4 }}"
        recurse: yes
      register: matched_zip_file4

    - name: Create AWS Lambda function - "{{ function_name4 }}"
      lambda:
        name: "{{ function_name4 }}"
        zip_file: "{{ lookup('fileglob', matched_zip_file4.files[0].path) }}"
        runtime: 'nodejs12.x'
        region: "{{ region }}"
        role: "{{ iam_role_response.arn }}"
        handler: 'index.handler'
        timeout: 3
        memory_size: 512
        environment_variables: null
      register: lambda_info4

    - name: Create function alias name - "{{ function_name4 }}"
      lambda_alias:
        function_name: "{{ function_name4 }}"
        name: "{{ function_name4 }}-v0_1"
        region: "{{ region }}"
        state: present
      register: alias_info4

    - name: Add invocation permission of Lambda function on AWS - "{{ function_name4 }}"
      lambda_policy:
        function_name: "{{ function_name4 }}"
        statement_id: "lambda-myFunction-{{ function_name4 }}"
        action: lambda:InvokeFunction
        region: "{{ region }}"
        alias: "{{ function_name4 }}-v0_1"
        principal: "s3.amazonaws.com"

    # Note: Setup & configuration of fifth AWS Lambda function
    - name: Find "{{ zip_file5 }}"
      find:
        paths: "{{ current_directory }}"
        patterns: "{{ zip_file5 }}"
        recurse: yes
      register: matched_zip_file5

    - name: Create AWS Lambda function - "{{ function_name5 }}"
      lambda:
        name: "{{ function_name5 }}"
        zip_file: "{{ lookup('fileglob', matched_zip_file5.files[0].path) }}"
        runtime: 'nodejs12.x'
        region: "{{ region }}"
        role: "{{ iam_role_response.arn }}"
        handler: 'index.handler'
        timeout: 3
        memory_size: 512
        environment_variables: null
      register: lambda_info5

    - name: Create function alias name - "{{ function_name5 }}"
      lambda_alias:
        function_name: "{{ function_name5 }}"
        name: "{{ function_name5 }}-v0_1"
        region: "{{ region }}"
        state: present
      register: alias_info5

    - name: Add invocation permission of Lambda function on AWS - "{{ function_name5 }}"
      lambda_policy:
        function_name: "{{ function_name5 }}"
        statement_id: "lambda-myFunction-{{ function_name5 }}"
        action: lambda:InvokeFunction
        region: "{{ region }}"
        alias: "{{ function_name5 }}-v0_1"
        principal: "s3.amazonaws.com"

    # Note: Setup & configuration of AWS API Gateway
    - name: Find swagger.yaml by name
      find:
        paths: "{{ current_directory }}"
        patterns: 'swagger.yaml,swagger.json'
        recurse: yes
      register: matched_swagger_file

    - debug:
        msg: "Founded swagger file: {{ matched_swagger_file.files[0].path }}"

    - name: Check that the swagger file exists
      stat:
        path: "{{ matched_swagger_file.files[0].path }}"
      register: swagger_spec

    - name: Remove the old swagger specification
      file:
        path: "{{ matched_swagger_file.files[0].path }}"
        state: absent
      when: swagger_spec.stat.exists

    - name: Set the basis for API
      copy:
        content: '{ "swagger": "2.0", "info": {"title": "{{ api_title }}", "description": "{{ api_description }}", "version": "{{ api_version }}" }, "paths": {"/todo": []}}'
        dest: "{{ current_directory }}/swagger.json"

    - debug:
        msg: "Debug info credential: {{ iam_role_response.arn }}"

    - name: Run swagger_gen.py script for adding methods to swagger file
      script: swagger_gen.py {{ iam_role_response.arn }} {{ create_post_method }} {{ uriPost }} {{ create_put_method }} {{ uriPut }} {{ create_delete_method }} {{ uriDelete }} {{ create_get_method }} {{ uriGet }}
      args:
        executable: python3

#    - name: Setup AWS API Gateway setup on AWS and deploy API definition
#      aws_api_gateway:
#        state: present
#        swagger_file: "{{ current_directory }}/swagger.json"
#        stage: production
#        region: "{{ region }}"
